

name: Pipeline CI/CD

on:
  push:
    branches: [ main ]
    
  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:

  build:
    name: Test, Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      ######## DOCKER COMPOSE ###########
      - name: docker-compose up --build
        run: | 
          docker-compose -f docker-compose.yml up --build -d
          # docker-compose -f docker-compose.yml -p testing up --build --exit-code-from api-test

      ########  TEST RESULTS  ###########
      - name: Export test results
        if: success()
        run: | 
          mkdir ./testresult
          mkdir ./testresult/ers-api
          mkdir ./testresult/ers-gateway
          docker cp ers-api:/usr/local/ers-api/target/surefire-reports/ ./testresult/ers-api
          docker cp ers-gateway:/usr/local/ers-gateway/target/surefire-reports/ ./testresult/ers-gateway

      - name: ERS-API Test results
        uses: dorny/test-reporter@v1.5.0
        if: always()
        with:
          name: ERS-API Test results
          path: "./testresult/ers-api/surefire-reports/TEST-*.xml"
          reporter: java-junit
          fail-on-error: true

      - name: ERS-GATEWAY Test results
        uses: dorny/test-reporter@v1.5.0
        if: always()
        with:
          name: ERS-GATEWAY Test results
          path: "./testresult/ers-gateway/surefire-reports/TEST-*.xml"
          reporter: java-junit
          fail-on-error: true


      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      
      - name: Test E2E
        working-directory: ./test-e2e/
        run: mvn --batch-mode -Dmaven.test.failure.ignore=true test




      ######## DEPLOY TO AWS FREE ###########
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: success()
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        if: success()
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and push image to Amazon ECR
        id: build-image
        if: success()
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest

        run: |
          docker tag ers-gateway:latest $ECR_REGISTRY/ers-gateway:$IMAGE_TAG
          docker tag ers-api:latest $ECR_REGISTRY/ers-api:$IMAGE_TAG
          # docker push $ECR_REGISTRY/ers-gateway:$IMAGE_TAG
          # docker push $ECR_REGISTRY/ers-api:$IMAGE_TAG
          echo "setting output values"
          echo "::set-output name=gwimage::$ECR_REGISTRY/ers-gateway:$IMAGE_TAG"
          echo "::set-output name=apiimage::$ECR_REGISTRY/ers-api:$IMAGE_TAG"

      - name: Print the image names
        if: success()
        run: |
          echo the images are
          echo ${{ steps.build-image.outputs.apiimage }}
          echo ${{ steps.build-image.outputs.gwimage }}

      ######## DEPLOY TO AWS RENTABLE ###########

      # - name: Download task definition
      #   run: |
      #     aws ecs describe-task-definition --task-definition ERSTaskDef --query taskDefinition | jq -r 'del(
      #       .taskDefinitionArn,
      #       .requiresAttributes,
      #       .compatibilities,
      #       .revision,
      #       .status,
      #       .registeredAt,
      #       .registeredBy
      #     )' > task-definition.json
      
      # - name: Fill in the new api image ID in the Amazon ECS task definition
      #   id: api-task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: task-definition.json
      #     container-name: ers-api
      #     image: ${{ steps.build-image.outputs.apiimage }}

      # - name: Fill in the new nginx image ID in the Amazon ECS task definition
      #   id: web-task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.api-task-def.outputs.task-definition }}
      #     container-name: ers-gateway
      #     image: ${{ steps.build-image.outputs.webimage }} 
      
      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.web-task-def.outputs.task-definition }}
      #     service: ERSService
      #     cluster: ERSCluster
      #     wait-for-service-stability: true


      ###### SLACK NOTIFICATION #########
      # - name: Send slack notification
      #   if: always()
      #   uses: edge/simple-slack-notify@master    
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      #   with:
      #     channel: '#deployment'
      #     status: ${{ job.status }}
      #     success_text: Build completed successfully
      #     failure_text: 'Build failed'
      #     cancelled_text: 'Build was cancelled'
      #     fields: |
      #       [{ "title": "Repository", "value": "${env.GITHUB_REPOSITORY}", "short": true },
      #       { "title": "Branch", "value": "${env.BRANCH}", "short": true },
      #       { "title": "Action URL", "value": "${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/actions/runs/${env.GITHUB_RUN_ID}"}]